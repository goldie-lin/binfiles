#!/usr/bin/env bash
# Author: Goldie Lin
# Description:
#   Fix/Replace illegal characters in filename recursively in current directory,
#   included all sub-directories.
# Requirements:
#   * find (findutils)
#   * getopt (util-linux)
#   * sed
# Usage:
#   Simply run `fix_filename_illegal_chars.sh` in the folder you want,
#   or specific a file or a directory as first argument.
# Options:
#   -n, --dry-run: just print, e.g.,
#       `fix_filename_illegal_chars.sh . -n`
# References:
#   [1] http://mywiki.wooledge.org/ArithmeticExpression

set -euo pipefail

# Variable definitions
# ====================

# sed script
read -r -d '' sed_script << '_SED_SCRIPT_' || true  # exit non-zero
# replace the start of square bracket with a underline:
s/\[/_/g
# replace the end of square bracket with a underline:
s/]/_/g
# replace tilde with a dash:
s/~\+/-/g
# replace illegal chars with a underline:
s/[[:space:](){}<>`!@#$%*?]\+/_/g
# replace ampersand with a string "_and_":
s/&/_and_/g
# replace a sequence of underlines with a underline:
s/_\+/_/g
# replace a sequence of dashes with a dash:
s/-\+/-/g
# replace underline+dash with a dash:
s/\(-_\|_-\)/-/g
# trim leading underlines or dashes:
s/^[-_]\+\(.\)/\1/
# trim trailing underlines or dashes before file extension:
s/[-_]\+\(\.[[:alnum:]]\{1,5\}\)$/\1/
_SED_SCRIPT_

script_file="$(readlink -f "${BASH_SOURCE[0]}")" # Absolute path to this script
#script_dir="$(dirname "${script_file}")"         # Absolute path this script is in
script_name="$(basename "${script_file}")"       # Filename of this script

# Function definitions
# ====================

fix_name() {
  local -r path="$1"
  local -r file_or_dir="$2"
  local -ri dry_run="$3"
  local -a flist=()
  local -i i=0
  local j=""
  local path2=""
  local name_org=""
  local name_mod=""

  if [[ -d "$1" ]]; then
    while IFS= read -r -d $'\0' j; do
      flist[i++]="$j" # array indices are numeric context, will force arithmetic evaluation [1]
    done < <(find "${path}" -depth -mindepth 1 -type "${file_or_dir}" -print0) # default find won't follow symlinks, unless "-L" option
  elif [[ -f "$1" ]]; then
      flist[i++]="$path"
  else
    return 0
  fi

  for ((i=0; i<${#flist[@]}; i++)); do
    path2="$(dirname "${flist[$i]}")"
    name_org="$(basename "${flist[$i]}")"
    name_mod="$(echo "${name_org}" | sed -f <(echo -n "${sed_script}"))"
    if [[ "${name_org}" != "${name_mod}" ]]; then
      if (( dry_run == 1 )); then
        echo "rename: '${path2}/${name_org}' --> '${path2}/${name_mod}'"
      else
        mv -v "${path2}/${name_org}" "${path2}/${name_mod}"
      fi
    fi
  done
}

fix_directories() {
  local -r path="$1"
  local -ri dry_run="$2"

  fix_name "${path}" d "${dry_run}"
}

fix_files() {
  local -r path="$1"
  local -ri dry_run="$2"

  fix_name "${path}" f "${dry_run}"
}

main() {
  local -r shortopts="n"
  local -r longopts="dry-run"
  local -i dry_run=0
  local -i i=0
  local path=""
  local tmp=""
  local j=""

  # parse options
  tmp="$(getopt -o "${shortopts}" -l "${longopts}" -n "${script_name}" -s 'bash' -- "$@")"
  # shellcheck disable=SC2181
  [[ $? -eq 0 ]] || { echo >&2 "Error: getopt parsing error."; return 1; }
  eval set -- "$tmp"
  while true; do
    case "$1" in
      -n|--dry-run) dry_run=1; shift;;
      --) shift; break;;
      *) echo >&2 "Error: args parsing error, unrecognized option: '$1'."; return 2;;
    esac
  done

  # get first file path
  for path in "$@"; do
    if [[ -d "${path}" || -f "${path}" ]]; then
      break
    fi
  done

  # default to current directory
  path="${path:-"."}"

  if [[ -e "${path}" ]]; then
    if [[ -d "${path}" ]]; then
      fix_directories "${path}" "${dry_run}"
    fi
    fix_files "${path}" "${dry_run}"
  else
    echo >&2 "Error: '${path}' path not found."; return 3
  fi
}

main "$@"
